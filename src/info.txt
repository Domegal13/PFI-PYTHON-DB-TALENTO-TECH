

# #? ----------------  MODIFICAR EL STOCK ------------------------------------------

def modificar_stock_inventario1(id_producto, cantidad, transaccion):
    if cantidad <= 0:
        print("La cantidad debe ser mayor a cero.")
        return False
    def verificar_stock_bajo(stock_actual):
        #? ------------------ Alerta de Productos en Stock Bajo. --------------------------------
        if stock_actual <= 25:
            print(Fore.RED + Style.BRIGHT + "El producto con ID: " + Fore.WHITE + Style.BRIGHT + f"{id_producto}" + Fore.RED + Style.BRIGHT + " se encuentra en stock bajo con: " + Fore.WHITE + Style.BRIGHT + f"{stock_actual}")
        #?------------------ Alerta de Productos Agotados. ---------------------------------------
        elif stock_actual == 0:
            print( Fore.RED + Style.BRIGHT + "El producto con ID: " + Fore.WHITE + Style.BRIGHT + f"{id_producto}" + Fore.RED + Style.BRIGHT + " está agotado.")

    try:
        conn = sql.connect("inventario.db")
        c = conn.cursor()
        consulta_cantidad = "SELECT cantidad FROM productos WHERE id  = ? "
        c.execute(consulta_cantidad, (id_producto,))
        resultado = c.fetchone()
        if not resultado:
            print(Fore.RED + Style.BRIGHT + f"No hay un producto con ID: " + Fore.WHITE + Style.BRIGHT + f"{id_producto} " + Fore.RED + Style.BRIGHT + "en la base de datos.")
            return False
        stock_actual = resultado[0]
        if transaccion == "entrada":
            nueva_cantidad = stock_actual + cantidad
            consulta = "UPDATE productos SET cantidad = cantidad + ? WHERE id =?"
            c.execute(consulta, (nueva_cantidad, id_producto))
            print(f"Se ha registrado una entrada de {transaccion} con ID {id_producto} y cantidad {cantidad}.")

        elif transaccion == "salida":
            if cantidad > stock_actual:
                print(Fore.RED + Style.BRIGHT + f"No hay suficiente stock para realizar la salida con ID {id_producto} y cantidad {cantidad}.")
                return False

            nueva_cantidad = stock_actual - cantidad
            consulta = "UPDATE productos SET cantidad = cantidad -? WHERE id =?"
            c.execute(consulta, (nueva_cantidad, id_producto))
            print(f"Se ha registrado una salida de {transaccion} con ID {id_producto} y cantidad {cantidad}.")

        verificar_stock_bajo(nueva_cantidad)

        conn.commit()
        return True
    except sql.Error as e:
        print(Fore.RED + Style.BRIGHT +f"Error al registrar la transacción: {e}")
        return False
    finally:
        if conn:
            conn.close()




# #? ----------------  CALCULAR EL INVENTARIO TOTAL ------------------------------------------

# def calcular_inventario_total():
#     try:
#         conn = sql.connect("inventario.db")
#         c = conn.cursor()
#         consulta = "SELECT SUM(cantidad) AS total FROM productos"
#         c.execute(consulta)
#         inventario_total = c.fetchone()[0]
#         return inventario_total
#     except sql.Error as e:
#         print(f"Error al calcular el inventario total: {e}")
#         return 0
#     finally:
#         if conn:
#             conn.close()

# #? ----------------  CALCULAR EL VALOR TOTAL DEL INVENTARIO ------------------------------------------

# def calcular_valor_total_del_inventario():
#     try:
#         conn = sql.connect("inventario.db")
#         c = conn.cursor()
#         consulta = "SELECT SUM(precio * cantidad) AS total FROM productos"
#         c.execute(consulta)
#         valor_total_del_inventario = c.fetchone()[0]
#         return valor_total_del_inventario
#     except sql.Error as e:
#         print(f"Error al calcular el valor total del inventario: {e}")
#         return 0
#     finally:
#         if conn:
#             conn.close()
